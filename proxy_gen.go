// Code generated by bony/gen/api. DO NOT EDIT.

package bony_api

import (
	"context"
	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-jsonrpc/auth"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/lotus/api"
	"github.com/filecoin-project/lotus/api/v0api"
	lotusMiner "github.com/filecoin-project/lotus/chain/actors/builtin/miner"
	"github.com/filecoin-project/lotus/chain/types"
	"github.com/filecoin-project/lotus/node/modules/dtypes"
	"github.com/ipfs/go-cid"
	"golang.org/x/xerrors"

)

var _ = v0api.ErrNotSupported
var ErrNotSupported = xerrors.New("method not supported")


type APIStruct struct {

	ChainAPIStruct

	StateAPIStruct

	LotusServiceAPIStruct

	Internal struct {

		SyncState func(p0 context.Context) (*api.SyncState, error) `perm:"read"`

	}
}

type APIStub struct {

	ChainAPIStub

	StateAPIStub

	LotusServiceAPIStub

}

type AuthAPIStruct struct {

	Internal struct {

		AuthVerify func(p0 context.Context, p1 string) ([]auth.Permission, error) `perm:"read"`

	}
}

type AuthAPIStub struct {

}

type ChainAPIStruct struct {

	Internal struct {

		ChainGetBlock func(p0 context.Context, p1 cid.Cid) (*types.BlockHeader, error) `perm:"read"`

		ChainGetBlockMessages func(p0 context.Context, p1 cid.Cid) (*api.BlockMessages, error) `perm:"read"`

		ChainGetGenesis func(p0 context.Context) (*types.TipSet, error) `perm:"read"`

		ChainGetParentMessages func(p0 context.Context, p1 cid.Cid) ([]api.Message, error) `perm:"read"`

		ChainGetParentReceipts func(p0 context.Context, p1 cid.Cid) ([]*types.MessageReceipt, error) `perm:"read"`

		ChainGetTipSet func(p0 context.Context, p1 types.TipSetKey) (*types.TipSet, error) `perm:"read"`

		ChainGetTipSetAfterHeight func(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) `perm:"read"`

		ChainGetTipSetByHeight func(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) `perm:"read"`

		ChainHasObj func(p0 context.Context, p1 cid.Cid) (bool, error) `perm:"read"`

		ChainHead func(p0 context.Context) (*types.TipSet, error) `perm:"read"`

		ChainNotify func(p0 context.Context) (<-chan []*api.HeadChange, error) `perm:"read"`

		ChainReadObj func(p0 context.Context, p1 cid.Cid) ([]byte, error) `perm:"read"`

		ChainSetHead func(p0 context.Context, p1 types.TipSetKey) (error) `perm:"admin"`

		ChainStatObj func(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (api.ObjStat, error) `perm:"read"`

	}
}

type ChainAPIStub struct {

}

type LotusServiceAPIStruct struct {

	Internal struct {

		MinerSectorChanges func(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) (*lotusMiner.SectorChanges, error) `perm:"read"`

		MinerVestingFunds func(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch) (abi.TokenAmount, error) `perm:"read"`

	}
}

type LotusServiceAPIStub struct {

}

type StateAPIStruct struct {

	Internal struct {

		StateChangedActors func(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (map[string]types.Actor, error) `perm:"read"`

		StateGetActor func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*types.Actor, error) `perm:"read"`

		StateGetReceipt func(p0 context.Context, p1 cid.Cid, p2 types.TipSetKey) (*types.MessageReceipt, error) `perm:"read"`

		StateListActors func(p0 context.Context, p1 types.TipSetKey) ([]address.Address, error) `perm:"read"`

		StateMarketDeals func(p0 context.Context, p1 types.TipSetKey) (map[string]api.MarketDeal, error) `perm:"read"`

		StateMinerDeadlines func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) ([]api.Deadline, error) `perm:"read"`

		StateMinerInfo func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (lotusMiner.MinerInfo, error) `perm:"read"`

		StateMinerPartitions func(p0 context.Context, p1 address.Address, p2 uint64, p3 types.TipSetKey) ([]api.Partition, error) `perm:"read"`

		StateMinerPower func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.MinerPower, error) `perm:"read"`

		StateMinerSectorAllocated func(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (bool, error) `perm:"read"`

		StateMinerSectorCount func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (api.MinerSectors, error) `perm:"read"`

		StateNetworkName func(p0 context.Context) (dtypes.NetworkName, error) `perm:"read"`

		StateReadState func(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.ActorState, error) `perm:"read"`

		StateSectorExpiration func(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorExpiration, error) `perm:"read"`

		StateSectorGetInfo func(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorOnChainInfo, error) `perm:"read"`

		StateSectorPartition func(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorLocation, error) `perm:"read"`

		StateSectorPreCommitInfo func(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (lotusMiner.SectorPreCommitOnChainInfo, error) `perm:"read"`

		StateVMCirculatingSupplyInternal func(p0 context.Context, p1 types.TipSetKey) (api.CirculatingSupply, error) `perm:"read"`

	}
}

type StateAPIStub struct {

}





func (s *APIStruct) SyncState(p0 context.Context) (*api.SyncState, error) {
	if s.Internal.SyncState == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.SyncState(p0)
}

func (s *APIStub) SyncState(p0 context.Context) (*api.SyncState, error) {
	return nil, ErrNotSupported
}




func (s *AuthAPIStruct) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	if s.Internal.AuthVerify == nil {
		return *new([]auth.Permission), ErrNotSupported
	}
	return s.Internal.AuthVerify(p0, p1)
}

func (s *AuthAPIStub) AuthVerify(p0 context.Context, p1 string) ([]auth.Permission, error) {
	return *new([]auth.Permission), ErrNotSupported
}




func (s *ChainAPIStruct) ChainGetBlock(p0 context.Context, p1 cid.Cid) (*types.BlockHeader, error) {
	if s.Internal.ChainGetBlock == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetBlock(p0, p1)
}

func (s *ChainAPIStub) ChainGetBlock(p0 context.Context, p1 cid.Cid) (*types.BlockHeader, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetBlockMessages(p0 context.Context, p1 cid.Cid) (*api.BlockMessages, error) {
	if s.Internal.ChainGetBlockMessages == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetBlockMessages(p0, p1)
}

func (s *ChainAPIStub) ChainGetBlockMessages(p0 context.Context, p1 cid.Cid) (*api.BlockMessages, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetGenesis(p0 context.Context) (*types.TipSet, error) {
	if s.Internal.ChainGetGenesis == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetGenesis(p0)
}

func (s *ChainAPIStub) ChainGetGenesis(p0 context.Context) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetParentMessages(p0 context.Context, p1 cid.Cid) ([]api.Message, error) {
	if s.Internal.ChainGetParentMessages == nil {
		return *new([]api.Message), ErrNotSupported
	}
	return s.Internal.ChainGetParentMessages(p0, p1)
}

func (s *ChainAPIStub) ChainGetParentMessages(p0 context.Context, p1 cid.Cid) ([]api.Message, error) {
	return *new([]api.Message), ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetParentReceipts(p0 context.Context, p1 cid.Cid) ([]*types.MessageReceipt, error) {
	if s.Internal.ChainGetParentReceipts == nil {
		return *new([]*types.MessageReceipt), ErrNotSupported
	}
	return s.Internal.ChainGetParentReceipts(p0, p1)
}

func (s *ChainAPIStub) ChainGetParentReceipts(p0 context.Context, p1 cid.Cid) ([]*types.MessageReceipt, error) {
	return *new([]*types.MessageReceipt), ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetTipSet(p0 context.Context, p1 types.TipSetKey) (*types.TipSet, error) {
	if s.Internal.ChainGetTipSet == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetTipSet(p0, p1)
}

func (s *ChainAPIStub) ChainGetTipSet(p0 context.Context, p1 types.TipSetKey) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetTipSetAfterHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) {
	if s.Internal.ChainGetTipSetAfterHeight == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetTipSetAfterHeight(p0, p1, p2)
}

func (s *ChainAPIStub) ChainGetTipSetAfterHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainGetTipSetByHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) {
	if s.Internal.ChainGetTipSetByHeight == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetTipSetByHeight(p0, p1, p2)
}

func (s *ChainAPIStub) ChainGetTipSetByHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainHasObj(p0 context.Context, p1 cid.Cid) (bool, error) {
	if s.Internal.ChainHasObj == nil {
		return false, ErrNotSupported
	}
	return s.Internal.ChainHasObj(p0, p1)
}

func (s *ChainAPIStub) ChainHasObj(p0 context.Context, p1 cid.Cid) (bool, error) {
	return false, ErrNotSupported
}

func (s *ChainAPIStruct) ChainHead(p0 context.Context) (*types.TipSet, error) {
	if s.Internal.ChainHead == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainHead(p0)
}

func (s *ChainAPIStub) ChainHead(p0 context.Context) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainNotify(p0 context.Context) (<-chan []*api.HeadChange, error) {
	if s.Internal.ChainNotify == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainNotify(p0)
}

func (s *ChainAPIStub) ChainNotify(p0 context.Context) (<-chan []*api.HeadChange, error) {
	return nil, ErrNotSupported
}

func (s *ChainAPIStruct) ChainReadObj(p0 context.Context, p1 cid.Cid) ([]byte, error) {
	if s.Internal.ChainReadObj == nil {
		return *new([]byte), ErrNotSupported
	}
	return s.Internal.ChainReadObj(p0, p1)
}

func (s *ChainAPIStub) ChainReadObj(p0 context.Context, p1 cid.Cid) ([]byte, error) {
	return *new([]byte), ErrNotSupported
}

func (s *ChainAPIStruct) ChainSetHead(p0 context.Context, p1 types.TipSetKey) (error) {
	if s.Internal.ChainSetHead == nil {
		return ErrNotSupported
	}
	return s.Internal.ChainSetHead(p0, p1)
}

func (s *ChainAPIStub) ChainSetHead(p0 context.Context, p1 types.TipSetKey) (error) {
	return ErrNotSupported
}

func (s *ChainAPIStruct) ChainStatObj(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (api.ObjStat, error) {
	if s.Internal.ChainStatObj == nil {
		return *new(api.ObjStat), ErrNotSupported
	}
	return s.Internal.ChainStatObj(p0, p1, p2)
}

func (s *ChainAPIStub) ChainStatObj(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (api.ObjStat, error) {
	return *new(api.ObjStat), ErrNotSupported
}




func (s *LotusServiceAPIStruct) MinerSectorChanges(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) (*lotusMiner.SectorChanges, error) {
	if s.Internal.MinerSectorChanges == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.MinerSectorChanges(p0, p1, p2, p3)
}

func (s *LotusServiceAPIStub) MinerSectorChanges(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch, p3 abi.ChainEpoch) (*lotusMiner.SectorChanges, error) {
	return nil, ErrNotSupported
}

func (s *LotusServiceAPIStruct) MinerVestingFunds(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch) (abi.TokenAmount, error) {
	if s.Internal.MinerVestingFunds == nil {
		return *new(abi.TokenAmount), ErrNotSupported
	}
	return s.Internal.MinerVestingFunds(p0, p1, p2)
}

func (s *LotusServiceAPIStub) MinerVestingFunds(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch) (abi.TokenAmount, error) {
	return *new(abi.TokenAmount), ErrNotSupported
}




func (s *StateAPIStruct) StateChangedActors(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (map[string]types.Actor, error) {
	if s.Internal.StateChangedActors == nil {
		return *new(map[string]types.Actor), ErrNotSupported
	}
	return s.Internal.StateChangedActors(p0, p1, p2)
}

func (s *StateAPIStub) StateChangedActors(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (map[string]types.Actor, error) {
	return *new(map[string]types.Actor), ErrNotSupported
}

func (s *StateAPIStruct) StateGetActor(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*types.Actor, error) {
	if s.Internal.StateGetActor == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateGetActor(p0, p1, p2)
}

func (s *StateAPIStub) StateGetActor(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*types.Actor, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateGetReceipt(p0 context.Context, p1 cid.Cid, p2 types.TipSetKey) (*types.MessageReceipt, error) {
	if s.Internal.StateGetReceipt == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateGetReceipt(p0, p1, p2)
}

func (s *StateAPIStub) StateGetReceipt(p0 context.Context, p1 cid.Cid, p2 types.TipSetKey) (*types.MessageReceipt, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateListActors(p0 context.Context, p1 types.TipSetKey) ([]address.Address, error) {
	if s.Internal.StateListActors == nil {
		return *new([]address.Address), ErrNotSupported
	}
	return s.Internal.StateListActors(p0, p1)
}

func (s *StateAPIStub) StateListActors(p0 context.Context, p1 types.TipSetKey) ([]address.Address, error) {
	return *new([]address.Address), ErrNotSupported
}

func (s *StateAPIStruct) StateMarketDeals(p0 context.Context, p1 types.TipSetKey) (map[string]api.MarketDeal, error) {
	if s.Internal.StateMarketDeals == nil {
		return *new(map[string]api.MarketDeal), ErrNotSupported
	}
	return s.Internal.StateMarketDeals(p0, p1)
}

func (s *StateAPIStub) StateMarketDeals(p0 context.Context, p1 types.TipSetKey) (map[string]api.MarketDeal, error) {
	return *new(map[string]api.MarketDeal), ErrNotSupported
}

func (s *StateAPIStruct) StateMinerDeadlines(p0 context.Context, p1 address.Address, p2 types.TipSetKey) ([]api.Deadline, error) {
	if s.Internal.StateMinerDeadlines == nil {
		return *new([]api.Deadline), ErrNotSupported
	}
	return s.Internal.StateMinerDeadlines(p0, p1, p2)
}

func (s *StateAPIStub) StateMinerDeadlines(p0 context.Context, p1 address.Address, p2 types.TipSetKey) ([]api.Deadline, error) {
	return *new([]api.Deadline), ErrNotSupported
}

func (s *StateAPIStruct) StateMinerInfo(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (lotusMiner.MinerInfo, error) {
	if s.Internal.StateMinerInfo == nil {
		return *new(lotusMiner.MinerInfo), ErrNotSupported
	}
	return s.Internal.StateMinerInfo(p0, p1, p2)
}

func (s *StateAPIStub) StateMinerInfo(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (lotusMiner.MinerInfo, error) {
	return *new(lotusMiner.MinerInfo), ErrNotSupported
}

func (s *StateAPIStruct) StateMinerPartitions(p0 context.Context, p1 address.Address, p2 uint64, p3 types.TipSetKey) ([]api.Partition, error) {
	if s.Internal.StateMinerPartitions == nil {
		return *new([]api.Partition), ErrNotSupported
	}
	return s.Internal.StateMinerPartitions(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateMinerPartitions(p0 context.Context, p1 address.Address, p2 uint64, p3 types.TipSetKey) ([]api.Partition, error) {
	return *new([]api.Partition), ErrNotSupported
}

func (s *StateAPIStruct) StateMinerPower(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.MinerPower, error) {
	if s.Internal.StateMinerPower == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateMinerPower(p0, p1, p2)
}

func (s *StateAPIStub) StateMinerPower(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.MinerPower, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateMinerSectorAllocated(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (bool, error) {
	if s.Internal.StateMinerSectorAllocated == nil {
		return false, ErrNotSupported
	}
	return s.Internal.StateMinerSectorAllocated(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateMinerSectorAllocated(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (bool, error) {
	return false, ErrNotSupported
}

func (s *StateAPIStruct) StateMinerSectorCount(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (api.MinerSectors, error) {
	if s.Internal.StateMinerSectorCount == nil {
		return *new(api.MinerSectors), ErrNotSupported
	}
	return s.Internal.StateMinerSectorCount(p0, p1, p2)
}

func (s *StateAPIStub) StateMinerSectorCount(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (api.MinerSectors, error) {
	return *new(api.MinerSectors), ErrNotSupported
}

func (s *StateAPIStruct) StateNetworkName(p0 context.Context) (dtypes.NetworkName, error) {
	if s.Internal.StateNetworkName == nil {
		return *new(dtypes.NetworkName), ErrNotSupported
	}
	return s.Internal.StateNetworkName(p0)
}

func (s *StateAPIStub) StateNetworkName(p0 context.Context) (dtypes.NetworkName, error) {
	return *new(dtypes.NetworkName), ErrNotSupported
}

func (s *StateAPIStruct) StateReadState(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.ActorState, error) {
	if s.Internal.StateReadState == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateReadState(p0, p1, p2)
}

func (s *StateAPIStub) StateReadState(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*api.ActorState, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateSectorExpiration(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorExpiration, error) {
	if s.Internal.StateSectorExpiration == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateSectorExpiration(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateSectorExpiration(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorExpiration, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateSectorGetInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorOnChainInfo, error) {
	if s.Internal.StateSectorGetInfo == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateSectorGetInfo(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateSectorGetInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorOnChainInfo, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateSectorPartition(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorLocation, error) {
	if s.Internal.StateSectorPartition == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.StateSectorPartition(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateSectorPartition(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lotusMiner.SectorLocation, error) {
	return nil, ErrNotSupported
}

func (s *StateAPIStruct) StateSectorPreCommitInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (lotusMiner.SectorPreCommitOnChainInfo, error) {
	if s.Internal.StateSectorPreCommitInfo == nil {
		return *new(lotusMiner.SectorPreCommitOnChainInfo), ErrNotSupported
	}
	return s.Internal.StateSectorPreCommitInfo(p0, p1, p2, p3)
}

func (s *StateAPIStub) StateSectorPreCommitInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (lotusMiner.SectorPreCommitOnChainInfo, error) {
	return *new(lotusMiner.SectorPreCommitOnChainInfo), ErrNotSupported
}

func (s *StateAPIStruct) StateVMCirculatingSupplyInternal(p0 context.Context, p1 types.TipSetKey) (api.CirculatingSupply, error) {
	if s.Internal.StateVMCirculatingSupplyInternal == nil {
		return *new(api.CirculatingSupply), ErrNotSupported
	}
	return s.Internal.StateVMCirculatingSupplyInternal(p0, p1)
}

func (s *StateAPIStub) StateVMCirculatingSupplyInternal(p0 context.Context, p1 types.TipSetKey) (api.CirculatingSupply, error) {
	return *new(api.CirculatingSupply), ErrNotSupported
}



var _ API = new(APIStruct)
var _ AuthAPI = new(AuthAPIStruct)
var _ ChainAPI = new(ChainAPIStruct)
var _ LotusServiceAPI = new(LotusServiceAPIStruct)
var _ StateAPI = new(StateAPIStruct)

